(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{300:function(t,a,_){"use strict";_.r(a);var e=_(38),s=Object(e.a)({},function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"多表连接总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多表连接总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 多表连接总结")]),t._v(" "),_("h4",{attrs:{id:"写在前面"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#写在前面","aria-hidden":"true"}},[t._v("#")]),t._v(" 写在前面")]),t._v(" "),_("blockquote",[_("p",[t._v("主要包括常规的一些数据表之前关联概念以及操作。例如：LEFT JOIN、RIGHT JOIN 以及 UNION 等")])]),t._v(" "),_("h4",{attrs:{id:"_1-普通关联（不设置主表）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-普通关联（不设置主表）","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 普通关联（不设置主表）")]),t._v(" "),_("div",{staticClass:"language-mysql extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("-- sql 如下\nselect tb_a.*,tb_b.* from tb_a,tb_b where tb_a.a_id = tb_b.b_id\n")])])]),_("blockquote",[_("p",[t._v("上面的 sql 结果将是展示 tb_a 和 tb_b 公有 tb_a.a_id 和 tb_b.b_id 相同部分")])]),t._v(" "),_("h4",{attrs:{id:"_2-左关联或右关联（left-join-或-right-join）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-左关联或右关联（left-join-或-right-join）","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 左关联或右关联（LEFT JOIN 或 RIGHT JOIN）")]),t._v(" "),_("div",{staticClass:"language-mysql extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("-- sql 如下\n\nselect tb_a.*,tb_b.* from tb_a left join tb_b on tb_a.a_id = tb_b.b_id\n\nselect tb_a.*,tb_b.* from tb_a right join tb_b on tb_a.a_id = tb_b.b_id\n")])])]),_("blockquote",[_("p",[t._v("上面 sql 的结果 sql(1) 则展示 tb_a的全部行数据，如果匹配到与 tb_b.b_id 相同时，则展示 tb_b 的数据，否则补空；sql(2)则相反，已tb_b 为主表，匹配时展示 tb_a 的数据，否则补空")])]),t._v(" "),_("h4",{attrs:{id:"_3-问题：mysql-没有-outer-join-？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-问题：mysql-没有-outer-join-？","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 问题：Mysql 没有 OUTER JOIN ？")]),t._v(" "),_("p",[t._v("答案是：没有！但是我们可以通过下面的方式来解决此问题。")]),t._v(" "),_("blockquote",[_("p",[t._v("什么是 OUTER JOIN? OUTER JOIN 其实 两边的数据表都当作主表，每个表中的数据都将完全展示，当匹配不到另一个的数据时，各自补空。")])]),t._v(" "),_("div",{staticClass:"language-mysql extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("-- sql 如下\n\nselect tb_a.*,tb_b.* from tb_a left join tb_b on tb_a.a_id = tb_b.b_id\n\nunion\n\nselect tb_a.*,tb_b.* from tb_a right join tb_b on tb_a.a_id = tb_b.b_id\n")])])]),_("blockquote",[_("p",[t._v("如上述的 sql 其实等价于其他种类数据库的sql: "),_("code",[t._v("select tb_a.*,tb_b.* from tb_a outer join tb_b on tb_a.a_id = tb_b.b_id")])])]),t._v(" "),_("h4",{attrs:{id:"_4-union-和-union-all"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-union-和-union-all","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. UNION 和 UNION ALL")]),t._v(" "),_("blockquote",[_("p",[t._v("UNION　是将两个　sql 返回的结果拼接到一起，由理解可以看出需要两段 sql 返回的数据接口是相同才能匹配并拼接，并剔除相同项")])]),t._v(" "),_("blockquote",[_("p",[t._v("UNION ALL 则不会判断返回的数据是否有相同项，只是无脑将结果拼接在一起而已。")])])])},[],!1,null,null,null);a.default=s.exports}}]);