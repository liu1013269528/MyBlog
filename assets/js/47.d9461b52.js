(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{293:function(t,r,n){"use strict";n.r(r);var e=n(38),a=Object(e.a)({},function(){var t=this,r=t.$createElement,n=t._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"多数组全排列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多数组全排列","aria-hidden":"true"}},[t._v("#")]),t._v(" 多数组全排列")]),t._v(" "),n("h4",{attrs:{id:"写在前面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写在前面","aria-hidden":"true"}},[t._v("#")]),t._v(" 写在前面")]),t._v(" "),n("p",[t._v("写代码的时候遇到一个看似简单的问题，才让我深刻理解到算法对于编程的重要性，未来重心要放到算法的研究，算法研究是程序员开拓思维提高境界必经之路。")]),t._v(" "),n("h2",{attrs:{id:"问题分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 问题分析")]),t._v(" "),n("blockquote",[n("p",[t._v("问题出现场景")])]),t._v(" "),n("ul",[n("li",[t._v("给你几个数组分别是：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$arr1 = ['高端银','玫瑰金','深空灰'];\n$arr2 = ['32G','64G','128G'];\n$arr3 = ['国行','港版','美版'];\n")])])]),n("ul",[n("li",[t._v("问：如何获得三个数组的全排列？，即")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("result[0] = '高端银，32G, 国行';\nresult[1] = '高端银，32G, 港版';\nresult[2] = '高端银，32G, 美版';\nresult[3] = '高端银，64G, 国行';\n.....\nresult[26] = '深空灰，128G, 美版';\n")])])]),n("ul",[n("li",[t._v("这个其实不难，分别遍历三次，每次三个元素也就是 3x3x3 生成 27个排列组合。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$delimiter = ',';\n$result = array();\nforeach($arr1 as $a1){\n    foreach($arr2 as $a2){\n        foreach($arr3 as $a3){\n            $item = $a1.$delimiter.$a2.$delimiter.$a3;\n            array_push($result, $item);\n        }\n    }\n}\nvar_dump($result);\n")])])]),n("h2",{attrs:{id:"算法分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法分析")]),t._v(" "),n("blockquote",[n("p",[t._v("那么问题来了？如果给的数据源数组个数不一定，以及每个数组元素个数不确定，以及每个元素的元素个数，如果才能获得不定数组的全排列呢？")])]),t._v(" "),n("ul",[n("li",[t._v("错误解题思路：")])]),t._v(" "),n("p",[t._v("最初我一看到这个问题，就一股脑的分析到底需要循环多少次，然后越想越糊涂，因为这本来就是一个不定循环，具体循环多少次完全取决于你的数据源（我定义为：$target）")]),t._v(" "),n("ul",[n("li",[t._v("正确解题思路：")])]),t._v(" "),n("ol",[n("li",[t._v("以具体案例分析场景，最初我使用 2个数组，以及 3 个数组源，找规律")]),t._v(" "),n("li",[t._v("学会拆封过程，因为拆封过程你就发现规律。")])]),t._v(" "),n("ul",[n("li",[t._v("分析结果：")])]),t._v(" "),n("p",[t._v("1.这种类型的设计思路其实就是，首选数据源的前两个数组进行卡迪尔积运算，生成新的数组，然后新的数组跟数据源的下一个数组进行卡迪尔积运算，最终生成一个拥有元素个数为 每个数组元素个数乘积的新数组，即：sizeof($result) = sizeof($arr1)xsizeof($arr2)x....sizeof($arrn);\n2. 这种类型使用递归来解决，只需要注意递归的跳出问题")]),t._v(" "),n("ul",[n("li",[t._v("溢出问题")])]),t._v(" "),n("ol",[n("li",[t._v("如果数据源只有一个元素，不能进行卡迪尔积运算，跳出；")]),t._v(" "),n("li",[t._v("如果运算次数超过了数据源本身个数，跳出；")])]),t._v(" "),n("h2",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),n("blockquote",[n("p",[t._v("最终代码")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/** 多数组排列\n * @param $target 数据源\n * @param int $depth 运行深度,默认 0\n * @param array $result 中间结果\n * @param string $delimiter 结果分隔符\n * @return array|null 结果\n */\nfunction arrOrder($target, $depth = 0, $result = array(), $delimiter = ',')\n{\n    // 判断数据源个数是否大于0\n    if (sizeof($target) < 2) {\n        return (isset($target[0]))? $target[0] : null;\n    }\n    // 判断当前运算深度是否导致数据源溢出\n    if ($depth >= sizeof($target) - 1) {\n        return $result;\n    }\n    $result = ($result) ? $result : $target[$depth];\n    $rs = array();\n    foreach ($result as $r) {\n        foreach ($target[$depth + 1] as $a) {\n            $item = $r . $delimiter . $a;\n            array_push($rs, $item);\n        }\n    }\n    $depth++;\n    // 进行递归\n    return arrOrder($target, $depth, $rs, $delimiter);\n}\n")])])]),n("blockquote",[n("p",[t._v("运行结果")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$target = [\n    ['高端银', '玫瑰金', '深空灰'],\n    ['32G', '64G', '128G'],\n    ['国行', '港版', '美版'],\n];\n$result = arrOrder($target);\nvar_dump($result);\n-------- 结果 ---------\narray (size=27)\n  0 => string '高端银,32G,国行' (length=20)\n  1 => string '高端银,32G,港版' (length=20)\n  2 => string '高端银,32G,美版' (length=20)\n  3 => string '高端银,64G,国行' (length=20)\n  4 => string '高端银,64G,港版' (length=20)\n  5 => string '高端银,64G,美版' (length=20)\n  6 => string '高端银,128G,国行' (length=21)\n  7 => string '高端银,128G,港版' (length=21)\n  8 => string '高端银,128G,美版' (length=21)\n  9 => string '玫瑰金,32G,国行' (length=20)\n  10 => string '玫瑰金,32G,港版' (length=20)\n  11 => string '玫瑰金,32G,美版' (length=20)\n  12 => string '玫瑰金,64G,国行' (length=20)\n  13 => string '玫瑰金,64G,港版' (length=20)\n  14 => string '玫瑰金,64G,美版' (length=20)\n  15 => string '玫瑰金,128G,国行' (length=21)\n  16 => string '玫瑰金,128G,港版' (length=21)\n  17 => string '玫瑰金,128G,美版' (length=21)\n  18 => string '深空灰,32G,国行' (length=20)\n  19 => string '深空灰,32G,港版' (length=20)\n  20 => string '深空灰,32G,美版' (length=20)\n  21 => string '深空灰,64G,国行' (length=20)\n  22 => string '深空灰,64G,港版' (length=20)\n  23 => string '深空灰,64G,美版' (length=20)\n  24 => string '深空灰,128G,国行' (length=21)\n  25 => string '深空灰,128G,港版' (length=21)\n  26 => string '深空灰,128G,美版' (length=21)\n")])])])])},[],!1,null,null,null);r.default=a.exports}}]);